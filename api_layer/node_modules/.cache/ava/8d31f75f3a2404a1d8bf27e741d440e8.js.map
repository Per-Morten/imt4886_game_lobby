{"version":3,"sources":["model.test.js"],"names":["db","require","mongoose","MatchModel","match","gameToken","status","hostIP","hostPort","cb","before","t","then","end","catch","err","fail","after","connection","dropDatabase","close","beforeEach","remove","serial","plan","p","create","Object","assign","pass","p2","find","_id","exec","findById"],"mappings":";;AAAA;;;;;;AAEA,MAAMA,KAAKC,QAAQ,aAAR,CAAX;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,aAAaF,QAAQ,oBAAR,CAAnB;;AAGA,MAAMG,QAAQ;AACVC,eAAW,QADD;AAEVC,YAAQ,CAFE;AAGVC,YAAQ,WAHE;AAIVC,cAAU;AAJA,CAAd;;AAOA,cAAKC,EAAL,CAAQC,MAAR,CAAgBC,CAAD,IAAO;AAClBX,OAAG,kBAAH,EACKY,IADL,CACU,MAAMD,EAAEE,GAAF,EADhB,EAEKC,KAFL,CAEWC,OAAOJ,EAAEK,IAAF,CAAOD,GAAP,CAFlB;AAGH,CAJD;;AAMA,cAAKN,EAAL,CAAQQ,KAAR,CAAeN,CAAD,IAAO;AACjBT,aAASgB,UAAT,CAAoBlB,EAApB,CAAuBmB,YAAvB,CAAoC,MAAM;AACtCjB,iBAASgB,UAAT,CAAoBE,KAApB;AACAT,UAAEE,GAAF;AACH,KAHD;AAIH,CALD;;AAOA,cAAKJ,EAAL,CAAQY,UAAR,CAAoBV,CAAD,IAAO;AACtBR,eAAWmB,MAAX,CAAkB,EAAlB,EAAsB,MAAMX,EAAEE,GAAF,EAA5B;AACH,CAFD;;AAIA,cAAKU,MAAL,CAAY,oBAAZ,EAAkC,MAAOZ,CAAP,IAAa;AAC3CA,MAAEa,IAAF,CAAO,CAAP;;AAEA,UAAMC,IAAI,MAAMtB,WAAWuB,MAAX,CAAkBC,OAAOC,MAAP,CAAc,EAAd,EAAkBxB,KAAlB,CAAlB,CAAhB;AACA,QAAIqB,CAAJ,EAAO;AACHd,UAAEkB,IAAF;AACH,KAFD,MAEO;AACHlB,UAAEK,IAAF,CAAO,4BAAP;AACH;;AAED,UAAMc,KAAK,MAAM3B,WAAW4B,IAAX,CAAgB,EAAEC,KAAKP,EAAEO,GAAT,EAAhB,EAAgCC,IAAhC,EAAjB;AACA,QAAIH,EAAJ,EAAQ;AACJnB,UAAEkB,IAAF;AACH,KAFD,MAEO;AACHlB,UAAEK,IAAF,CAAO,8BAAP;AACH;AACJ,CAhBD;;AAkBA,cAAKO,MAAL,CAAY,kBAAZ,EAAgC,MAAOZ,CAAP,IAAa;AACzCA,MAAEa,IAAF,CAAO,CAAP;;AAEA,UAAMC,IAAI,MAAMtB,WAAWuB,MAAX,CAAkBC,OAAOC,MAAP,CAAc,EAAd,EAAkBxB,KAAlB,CAAlB,CAAhB;AACA,QAAIqB,CAAJ,EAAO;AACHd,UAAEkB,IAAF;AACH,KAFD,MAEO;AACHlB,UAAEK,IAAF,CAAO,4BAAP;AACH;;AAED,UAAMc,KAAK,MAAM3B,WAAW+B,QAAX,CAAoBT,EAAEO,GAAtB,EAA2BC,IAA3B,EAAjB;AACA,QAAIH,EAAJ,EAAQ;AACJnB,UAAEkB,IAAF;AACH,KAFD,MAEO;AACHlB,UAAEK,IAAF,CAAO,kCAAP;AACH;AACJ,CAhBD;;AAkBA,cAAKO,MAAL,CAAY,qBAAZ,EAAmC,MAAOZ,CAAP,IAAc;AAC7CA,MAAEa,IAAF;AAEH,CAHD","file":"model.test.js","sourcesContent":["import test from 'ava';\n\nconst db = require('../database');\nconst mongoose = require('mongoose');\nconst MatchModel = require('../../models/Match');\n\n\nconst match = {\n    gameToken: 'Game 1',\n    status: 1,\n    hostIP: '127.0.0.0',\n    hostPort: 3000,\n};\n\ntest.cb.before((t) => {\n    db('match-model-test')\n        .then(() => t.end())\n        .catch(err => t.fail(err));\n});\n\ntest.cb.after((t) => {\n    mongoose.connection.db.dropDatabase(() => {\n        mongoose.connection.close();\n        t.end();\n    });\n});\n\ntest.cb.beforeEach((t) => {\n    MatchModel.remove({}, () => t.end());\n});\n\ntest.serial('Create a new match', async (t) => {\n    t.plan(2);\n\n    const p = await MatchModel.create(Object.assign({}, match));\n    if (p) {\n        t.pass();\n    } else {\n        t.fail('Could not create the match');\n    }\n\n    const p2 = await MatchModel.find({ _id: p._id }).exec();\n    if (p2) {\n        t.pass();\n    } else {\n        t.fail('Could not find created match');\n    }\n});\n\ntest.serial('Find match by id', async (t) => {\n    t.plan(2);\n\n    const p = await MatchModel.create(Object.assign({}, match));\n    if (p) {\n        t.pass();\n    } else {\n        t.fail('Could not create the match');\n    }\n\n    const p2 = await MatchModel.findById(p._id).exec();\n    if (p2) {\n        t.pass();\n    } else {\n        t.fail('Could not find the created match');\n    }\n});\n\ntest.serial('Update status field', async (t) =>  {\n    t.plan();\n\n})\n"]}