{"version":3,"sources":["api.test.js"],"names":["request","require","MatchModel","db","mongoose","testMatch1","gameToken","status","hostIP","hostPort","testMatch2","cb","before","t","then","end","catch","err","fail","after","connection","dropDatabase","close","beforeEach","remove","promises","create","Object","assign","Promise","all","matches","context","console","log","server","serial","retObject","plan","length","get","_id","expect","response","entries","body","forEach","key","value","indexOf","pass","put","_status"],"mappings":"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","file":"api.test.js","sourcesContent":["import test from 'ava';\n\nconst request = require('supertest');\nconst MatchModel = require('../../models/Match');\nconst db = require('../database');\nconst mongoose = require('mongoose');\n\nconst testMatch1 = {\n    gameToken: 'Game 1',\n    status: 1,\n    hostIP: '127.0.0.0',\n    hostPort: 3000,\n};\n\nconst testMatch2 = {\n    gameToken: 'Game 2',\n    status: 0,\n    hostIP: '127.0.0.1',\n    hostPort: 3000,\n};\n\ntest.cb.before((t) => {\n    db('match-api-test')\n        .then(() => t.end())\n        .catch(err => t.fail(err));\n});\n\ntest.cb.after((t) => {\n    mongoose.connection.db.dropDatabase(() => {\n        mongoose.connection.close();\n        t.end();\n    });\n});\n\ntest.cb.beforeEach((t) => {\n    MatchModel.remove({}, () => {\n        let promises = [\n            MatchModel.create(Object.assign({}, testMatch1)),\n            MatchModel.create(Object.assign({}, testMatch2))\n        ];\n        Promise.all(promises)\n            .then(matches => {\n                if(matches[0] && matches[1]) {\n                    t.context.matches = matches;\n                    t.end();\n                }\n            }).catch(err => console.log(err))\n    });\n});\n\nconst server = require('../../classes/App');\n\ntest.serial('Should return a match', async(t) => {\n    const retObject = ['gameToken', 'status', 'hostIP', 'hostPort', '_id', '__v'];\n    t.plan(retObject.length + 1);\n\n    await request(server)\n        .get('/Match/' + t.context.matches[0]._id)\n        .expect(200)\n        .then(response => {\n            Object.entries(response.body).forEach(\n                ([key, value]) => {\n                    if (retObject.indexOf(key) === -1 || value === '') {\n                        t.fail(`Match returned invalid object name ${key} value ${value}`);\n                    } else {\n                        t.pass();\n                    }\n                }\n            )\n        })\n        .catch(err => t.fail(err));\n\n    t.pass();\n});\n\ntest.serial('Should be able to start match', async(t) => {\n\n    await request(server)\n        .put('/Match/' + t.context.matches[0]._id + '/' + t.context.matches[0]._status)\n        .expect(204)\n        .catch(err => t.fail(err));\n        t.pass();\n\n})\n"]}